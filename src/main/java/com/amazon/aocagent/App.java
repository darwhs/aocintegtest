/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.amazon.aocagent;

import com.amazon.aocagent.enums.GenericConstants;
import com.amazon.aocagent.enums.Stack;
import com.amazon.aocagent.exception.BaseException;
import com.amazon.aocagent.models.Context;
import com.amazon.aocagent.tasks.ITask;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.Callable;
import lombok.extern.log4j.Log4j2;
import picocli.CommandLine;




@CommandLine.Command(
    name = "aocintegtest",
    mixinStandardHelpOptions = true,
    version = "aocintegtest 1.0",
    description = "use for integtest and releases of the aocagent")
@Log4j2
public class App implements Callable<Integer> {
  @CommandLine.Option(
      names = {"-t", "--task"},
      description = "EC2Test, ECSTest, EKSTest, ...")
  private String taskName = "S3Release";

  @CommandLine.Option(
      names = {"-s", "--stack"},
      description = "TEST, RELEASE, HKG_RELEASE...")
  private String stackName = "TEST";

  @CommandLine.Option(
      names = {"-l", "--local-packages-dir"},
      description =
          "read packages, version file from this directory, default value is build/packages")
  private String localPackagesDir = GenericConstants.LOCAL_PACKAGES_DIR.getVal();

  public static void main(String[] args) {
    int exitCode = new CommandLine(new App()).execute(args);
    System.exit(exitCode);
  }

  @Override
  public Integer call() throws Exception {
    ITask task = (ITask) Class.forName("com.amazon.aocagent.tasks." + taskName).newInstance();
    task.init(this.buildContext());

    try {
      task.execute();
    } catch (BaseException ex) {
      log.error(ex.getMessage());
    }
    return 0;
  }

  private Context buildContext() throws IOException {
    Context context = new Context();

    Stack stack = Stack.valueOf(this.stackName);
    context.setStack(stack);

    context.setLocalPackagesDir(this.localPackagesDir);

    // get aoc version from the current working directory: "local-packages/VERSION"
    String version =
        new String(
            Files.readAllBytes(Paths.get(this.localPackagesDir + "/VERSION")),
            StandardCharsets.UTF_8);
    context.setAgentVersion(version);

    return context;
  }
}
